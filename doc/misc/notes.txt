Pages that pop up submenus on hover use various techniques to accomplish this. On the basis of inspections of some A11yHeros pages, the prevailing strategy is to use CSS to change the properties of a descendant element of an element depending on whether that element is hovered over. The target element is generally an <li>. The element whose property is changed is generally a <ul>. The <ul> may be constrained to be a child of the <li> or be permitted to be any descendant.

The properties that are changed can be any of these:

1. display=none vs display=block
2. visibility=hidden vs visibility=visible
3. opacity=0 vs opacitity=1

A combination of properties 2 and 3 has also been encountered.

It is reasonable for Autotest to judge all such hover-triggered changes of context to be accessibility faults. They cause surprise, make submenu-item selection pointer-path-dependent, penalize users with erratic hand movements, create risks of failure to provide full eqivalence of functionality for keyboard users, and greatly complicate testing.

Pages that a hover-popup test should be tested on include:

PEAT
Equal Entry
Mozilla
Converge Accessibility
American Printing House

https://www.aetna.com/individuals-families.html uses a different technique for the vertical menus “Shop for a plan” and “Member support”. Hovering over a button of one of those menus changes the display style property of the <ul> element that is a descendant of the grandparent of the button from none to block.

Duplications between Axe and IBM on failing.html

Axe rule aria-roles (critical for check invalidrole, serious for check abstractrole) and IBM rule Rpt_Aria_ValidRole (violation) fault for equation and landmark roles.

Axe rule label (critical) and IBM rule WCAG20_Input_ExplicitLabel (violation) fault for vehicle input being unlabeled.

Duplications between Axe and IBM on accessibe.com

Axe rule aria-allowed-role (minor) and IBM rule aria_semantics_role (violation) fault for img with role presentation. Both claim invalid, but neither explains why. ARIA says valid. IBM rule WCAG20_Img_PresentationImgHasNonNullAlt rule faults same cases for presentation role when alt not blank.

Axe rule color-contrast (serious) and IBM rule IBMA_Color_Contrast_WCAG2AA (violation) fault same 9 spans. IBM faults 4 more that Axe does not. Some of those have visibility: hidden. But IBM fails to find the color-contrast fault in failing.html found by Axe and WAVE.

Axe rule link-name (serious) and IBM rule WCAG20_A_HasText (violation) fault Facebook, LinkedIn, and YouTube links with no accessible name.

Axe rule region (moderate) and IBM rule Rpt_Aria_OrphanedContent_Native_Host_Sematics fault many elements that are not in landmarks. Axe faults many more than IBM does.

WAVE duplications on failing.html:

WAVE rule Broken ARIA reference (error) and IBM rule Rpt_Aria_ValidIdRef (violation) fault vehicle and Nothing labels for referencing nonexistent ID “nothing”.

WAVE rule Orphaned form label (alert) vaguely faults “enroll me” label without explaining why it is invalid, thus is inferior to labClash.

WAVE rule Missing fieldset (alert) and IBM rule WCAG20_Input_RadioChkInFieldSet (violation) fault furniture radio buttons for not being in a fieldset. WAVE reports 1 alert; IBM reports 2 violations, 1 per radio button.

WAVE rule Fieldset missing legend (alert) and IBM rule WCAG20_Fieldset_HasLegend (violation) fault official fieldset for omitting legend.

Both WAVE and IBM fail to report diverse radio groups sharing a single fieldset. So they are inferior to radioSet.

WAVE duplications on AccessiBe:

WAVE 1 finds 43 contrast errors in AccessiBe. Axe finds 9. IBM finds 13. WAVE browser extension fails to identify any of the elements.

WAVE 4 finds 3 errors.

WAVE browser extension finds 0 errors and 33 contrast errors; it cannot identify the contrast errors, instead only scrolling the page down on each request for identification.

WAVE 4 rule link_empty (error) duplicates Axe rule link-name and IBM rule WCAG20_A_HasText.

WAVE 4 finds 18 contrast errors, but Axe finds only 10.

WAVE 4 rule Contrast Errors (contrast) faults “GET DEMO” span for insufficient contrast, but Axe rule color-contrast does not. WAVE 4 is correct: #136ef8 over #f1f6f9 (4.18:1).

Conclusions:

There is substantial overlap, but tools change what they detect and are not reliably better than other tools. Therefore, a reasonable strategy is not to discount any rule of any tool but instead to decrease the weights of tool findings when they are likely to be duplicated.

Specifically, when comboing with Axe, IBM, WAVE, labClash, and radioSet, one can underweight:

Axe:
  aria-allowed-role: 2
  aria-roles: 2
  color-contrast: 2
  label: 3
  link-name: 3
  region: 2
IBM:
  aria_semantics_role: 2
  IBMA_Color_Contrast_WCAG2AA: 2
  Rpt_Aria_OrphanedContent_Native_Host_Sematics: 2
  Rpt_Aria_ValidIdRef: 2
  Rpt_Aria_ValidRole: 2
  WCAG20_A_HasText: 3
  WCAG20_Fieldset_HasLegend: 3
  WCAG20_Input_ExplicitLabel: 3
  WCAG20_Input_RadioChkInFieldSet: 3
WAVE:
  Broken ARIA reference (aria_reference_broken): 2
  Contrast Errors (contrast): 2
  Empty link (link_empty): 3
  Fieldset missing legend (legend_missing): 2
  Missing fieldset (fieldset_missing): 3
  Orphaned form label (label_orphaned): 3
  Empty link (link_empty): 3
Custom:
  labClash/unlabeled: 3
  radioSet: 2
